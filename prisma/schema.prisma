generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model Store {
  id             String     @id @default(uuid())
  name           String
  userId         String
  billboards     Billboard[] @relation("StoreToBillboard")
  categories     Category[]  @relation("StoreToCategory")
  sizes          Size[]      @relation("StoreToSize")
  colors         Color[]     @relation("StoreToColor")
  products       Product[]   @relation("StoreToProduct")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Billboard {
  id             String      @id @default(uuid())
  storeId        String
  store          Store       @relation("StoreToBillboard", fields: [storeId], references: [id])
  label          String
  imageUrl       String
  categories     Category[]
  createdAt      DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([storeId])
}

model Category {
  id             String      @id @default(uuid())
  storeId        String
  store          Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId    String
  billboard      Billboard   @relation(fields: [billboardId], references: [id])  
  products       Product[]   @relation("CategoryToProduct")
  name           String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId]) 
}

model Product {
  id             String      @id @default(uuid())
  storeId        String
  store          Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId     String
  category       Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name           String
  price          Decimal
  stock          Int
  isFeatured     Boolean     @default(false)
  isArchived     Boolean     @default(false)
  images         Image[]
  colors         Color[]     @relation("ProductToColor")
  sizes          Size[]      @relation("ProductToSize")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id             String      @id @default(uuid())
  productId      String
  product        Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  url            String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([productId])
}

model Color {
  id             String      @id @default(uuid())
  storeId        String
  store          Store       @relation("StoreToColor", fields: [storeId], references: [id])
  name           String
  value          String      // e.g., HEX code or color name
  products       Product[]   @relation("ProductToColor")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([storeId])
}

model Size {
  id             String      @id @default(uuid())
  storeId        String
  store          Store       @relation("StoreToSize", fields: [storeId], references: [id])
  name           String      // e.g., S, M, L
  value          String      // e.g., numeric or descriptive size value
  products       Product[]   @relation("ProductToSize")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([storeId])
}
